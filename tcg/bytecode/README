TCG Interpreter (TCI) - Stefan Weil.

1) Introduction

TCG (Tiny Code Generator) is a code generator which translates
code fragments ("basic blocks") from target code (any of the
targets supported by QEMU) to a code representation which
can be run on a host.

QEMU can create native code for some hosts (arm, hppa, i386, ppc, ppc64,
sparc, x86_64). For others, unoffical host support was written (s390).

By adding a code generator for some virtual machine and using an
interpreter for the generated bytecode, it is possible to
support (almost) any host.

This is what TCI (Tiny Code Interpreter) does.

2) Implementation

Like each TCG host frontend, TCI implements the code generator in
tcg-target.c, tcg-target.h, both in directory tcg/bytecode.

The additional file tcg/tci.c adds the interpreter.

The bytecode consists of opcodes (same numeric values as those used by
TCG) and arguments of variable size and number.

3) Usage

For hosts with native TCG, the interpreter TCI is enabled by

        configure --enable-tcg-interpreter

The only difference from running qemu with TCI to running without TCI
should be speed. Especially during development of TCI, it was very
useful to compare runs with and without TCI. Create /tmp/qemu.log by

        qemu -d in_asm,op_opt,cpu -singlestep

once with interpreter and once without interpreter and compare the resulting
qemu.log files. This is also useful to see the effects of additional
registers or additional opcodes (it is easy to modify the virtual machine).
It can also be used to verify native TCGs.

4) Status

TCI needs special implementation for 32 and 64 bit host, 32 and 64 bit target,
host and target with same or different endianess.

            | host (le)                     host (be)
            | 32             64             32             64
------------+------------------------------------------------------------
target (le) | s0, u0         s1, u1         s?, u?         s?, u?
32 bit      |
            |
target (le) | sc, uc         s1, u1         s?, u?         s?, u?
64 bit      |
            |
target (be) | sc, uc         sc, uc         s?, u?         s?, u?
32 bit      |
            |
target (be) | sc, uc         sc, uc         s?, u?         s?, u?
64 bit      |
            |

System emulation
s? = untested
sc = compiles
s0 = bios works
s1 = grub works
s2 = linux boots

Linux user mode emulation
u? = untested
uc = compiles
u0 = static hello works
u1 = linux-user-test works

5) Todo list

* TCI is still highly experimental. It is written and tested on a x86_64 host
  running i386 guests. Host / guest combinations will fail (missing
  byte swap) with the current version. 32 bit hosts need code fixes, too.

* A lot of TCG codes are either missing in the code generator and/or
  in the interpreter. These codes raise a runtime exception, so it is
  possible to see which parts of the code need to be fixed.

* The pseudo code is not optimized and rather ugly (no clear rules how
  arguments are written).

* A better disassembler for the pseudo code would be nice (a very primitive
  disassembler is included in tcg-target.c).

* It might be useful to have a runtime option which selects the native TCG
  or TCI, so qemu would have to include two TCGs. Today, selecting TCI
  is a configure option, so you need two compilations of qemu.
